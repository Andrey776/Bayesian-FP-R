library(rugarch)
library(rugarch)
contriburl = contrib.url(repos, type),
method, available = NULL, destdir = NULL,
dependencies = NA, type = getOption("pkgType"),
configure.args = getOption("configure.args"),
configure.vars = getOption("configure.vars"),
clean = FALSE, Ncpus = getOption("Ncpus", 1L),
verbose = getOption("verbose"),
libs_only = FALSE, INSTALL_opts, quiet = FALSE,
keep_outputs = FALSE, ...)
install.packages(pkgs, lib, repos = getOption("repos"),
contriburl = contrib.url(repos, type),
method, available = NULL, destdir = NULL,
dependencies = NA, type = getOption("pkgType"),
configure.args = getOption("configure.args"),
configure.vars = getOption("configure.vars"),
clean = FALSE, Ncpus = getOption("Ncpus", 1L),
verbose = getOption("verbose"),
libs_only = FALSE, INSTALL_opts, quiet = FALSE,
keep_outputs = FALSE, ...)
install.packages(pkgs, lib, repos = getOption("repos"),
contriburl = contrib.url(repos, type),
method, available = NULL, destdir = NULL,
dependencies = NA, type = getOption("pkgType"),
configure.args = getOption("configure.args"),
configure.vars = getOption("configure.vars"),
clean = FALSE, Ncpus = getOption("Ncpus", 1L),
verbose = getOption("verbose"),
libs_only = FALSE, INSTALL_opts, quiet = FALSE,
keep_outputs = FALSE)
install.packages("mclust")
install.packages("mclust")
library(rugarch)
ret <- replicate(1, rnorm(100))
RV <- replicate(1, rnorm(100))
date <- c(1:100)
times<-Sys.time()+date
ret_xts<-xts(ret,order.by = times)
RV_xts <- xts(RV,order.by = times)
library(xts)
ret <- replicate(1, rnorm(100))
RV <- replicate(1, rnorm(100))
date <- c(1:100)
times<-Sys.time()+date
ret_xts<-xts(ret,order.by = times)
RV_xts <- xts(RV,order.by = times)
fit <- ugarchfit(spec=attspec, data=ret_xts, solver = 'hybrid', realizedVol = RV_xts)
View(RV_xts)
View(ret_xts)
attspec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)))
fit <- ugarchfit(spec=attspec, data=ret_xts, solver = 'hybrid', realizedVol = RV_xts)
View(fit)
summary(fit)
show(fit)
source('~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/Bayesian-FP-R/real_garch-by_rugarch.R', echo=TRUE)
load("~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/data/subset_temp.RData")
source('~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/Bayesian-FP-R/real_garch-by_rugarch.R', echo=TRUE)
source('~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/Bayesian-FP-R/real_garch-by_rugarch.R', echo=TRUE)
View(subset)
ret_xts = xts(r, order.by = date)
ret_xts = xts(r, order.by = Sys.time()+date)
subset = xts(subset)
View(subset)
subset$date_time = as.Date.POSIXlt(subset$date)
subset$date_time = as_datetime(subset$date)
subset = xts(subset)
subset$date_time = as_datetime(subset$date)
library(lubridate)
subset$date_time = as_datetime(subset$date)
View(subset)
ret_xts = xts(r, order.by = date_time)
ret_xts = xts(r, order.by = subset$date_time)
subset = xts(subset, order.by = subsetdate_time)
subset1 = xts(subset, order.by = subset$date_time)
View(subset1)
RV_xts = subset1$rv5
attspec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)))
fit <- ugarchfit(spec=attspec, data=ret_xts, solver = 'hybrid', realizedVol = RV_xts)
ret_xts = subset1$vix_lin_ret[-(c(1))]
RV_xts =  subset1$rv5[-(c(1))]
attspec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)))
fit <- ugarchfit(spec=attspec, data=ret_xts, solver = 'hybrid', realizedVol = RV_xts)
show(fit)
View(subset)
subset$rv5[3]*2
subset$lin_ret[3]*2
subset$vix_lin_ret[3]*2
View(ret_xts)
sum(ret_xts$vix_lin_ret)
ret_xts$vix_lin_ret[3]
ret_xts$vix_lin_ret[3]*2
subset1$vix_lin_ret = as.numeric(subset1$vix_lin_ret)
subset1$rv5 = as.numeric(subset1$rv5)
ret_xts = subset1$vix_lin_ret[-(c(1))]
RV_xts =  subset1$rv5[-(c(1))]
attspec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE), variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)))
fit <- ugarchfit(spec=attspec, data=ret_xts, solver = 'hybrid', realizedVol = RV_xts)
ret_xts$vix_lin_ret[3]*2
View(subset1)
subset$vix_lin_ret[3]*2
subset1$vix_lin_ret[3]*2
subset1$vix_lin_ret[3]*2
subset1$vix_lin_ret[3]
subset1$vix_lin_ret = as.numeric(subset1$vix_lin_ret)
subset1$vix_lin_ret[3]
subset1$vix_lin_ret[3]*3
subset$vix_lin_ret[3]
subset1$vix_lin_ret[3]*3
subset$vix_lin_ret[3]*3
fit <- ugarchfit(spec=attspec, data=subset1$vix_lin_ret[-(c(1))],
solver = 'hybrid', realizedVol = subset1$rv5[-(c(1))])
#ret_xts<-xts(ret,order.by = times)
#RV_xts <- xts(RV,order.by = times)
subset$date_time = as_datetime(subset$date)
r <- subset$vix_lin_ret[-(c(1))]
x <- subset$rv5[-(c(1))]
r[1]
r[1]*2
fit <- ugarchfit(spec=attspec, data=r,
solver = 'hybrid', realizedVol = x)
fit <- ugarchfit(spec=attspec, data=xts(r),
solver = 'hybrid', realizedVol = xts(x))
subset1=subset[-(c(1)),]
View(subset1)
View(subset)
subset2 = xts(subset)
subset2 = xts(subset1)
subset2 = xts(subset1, order.by = subset1$date_time)
View(subset2)
subset2$vix_lin_ret[2]*2
View(subset2)
class(subset2$vix_lin_ret[2])
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, dateFormat='Date')
load("~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/data/subset_temp.RData")
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset, dateFormat='date')
View(subset)
subset$vix_lin_ret[2]*2
class(subset2$vix_lin_ret[2])
class(subset$vix_lin_ret[2])
subset1$date = as_datetime(subset$date)
subset1=subset[-(c(1)),]
subset1$date = as_datetime(subset$date)
subset1$date = as_datetime(subset1$date)
View(subset1)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, order.by = "date")
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, order.by = date)
subset1=subset[-(c(1)),]
subset1$date = Sys.time()+subset1$date
subset1=subset[-(c(1)),]
subset1$date = as_datetime(subset1$date)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, order.by = date)
View(subset1)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, order.by = "date')
subset$vix_lin_ret[2]*2
class(subset$vix_lin_ret[2])
ret_xts = subset1$vix_lin_ret[-(c(1))]
RV_xts =  subset1$rv5[-(c(1))]
attspec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)))
fit <- ugarchfit(spec=attspec, data=xts(r),
solver = 'hybrid', realizedVol = xts(x))
#fit <- ugarchfit(spec=attspec, data=ret_xts,
#                 solver = 'hybrid', realizedVol = RV_xts)
show(fit)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, order.by = "date")
class(subset1$date[2])
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = xts(subset1)
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, dateFormat='Date')
subset1=subset[-(c(1)),]
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, dateFormat='Date')
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, dateFormat='date')
#subset2 = xts(subset1, order.by = subset1$date_time)
subset3 = as.xts(subset1, dateFormat='Date')
ret_xts = xts(subset1$rv5, order.by = subset1$date)
View(ret_xts)
RV_xts =
ret_xts[2]*2
ret_xts[2]*2
ret_xts = xts(subset1$vix_lin_ret, order.by = subset1$date)
RV_xts =  xts(subset1$rv5, order.by = subset1$date)
ret_xts[2]*2
class(subset1$date[2])
class(ret_xts[2])
attspec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
variance.model = list(model = 'realGARCH', garchOrder = c(1, 1)))
fit <- ugarchfit(spec=attspec, data=ret_xts,
solver = 'hybrid', realizedVol = RV_xts)
show(fit)
source('~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/Bayesian-FP-R/real_garch-by_rugarch.R', echo=TRUE)
source('~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/Bayesian-FP-R/real_garch-by_rugarch.R', echo=TRUE)
source('~/Documents/_CU Masters/2020 fall Bayesian_7393/Final_Project/Bayesian-FP-R/real_garch-by_rugarch.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("stan-dev/loo")
library(data.table)
library(dplyr)
library(rstan)
library(xts)
library(lubridate)
library(ggplot2)
library(shinystan)
#install.packages('loo')
library(loo)
number = c(8.0, 9.0, 9.1, 10.2, 10.4, 10.0, 10.3, 12.2, 12.6, 13.9)
day = rep(1:5, 2)
type = factor(rep(c("A", "B"), each = 5))
bacteria = data.frame(day, number, type)
ggplot(data=bacteria, aes(x = day, y = number, colour = type, shape = type)) +
geom_point() +
labs(title = "Number of type A and type B bacteria",
x = "day",
y = "number of bacteria, thsd") +
theme(plot.title = element_text(lineheight=.8, face="bold"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
####  Model 1: A one-way ANOVA using type = “A” as the reference category.
# Create a dummy variable
type_b = c(type == 'B')
# Create model
stanmod = "
data {
int<lower=1> n; // number of observations
vector[n] y; // data
vector[n] type_b; //indicator for type b
real<lower=0> v_sample; // sample variance of y
real mu_sample; // sample mean of y
}
parameters {
real mu_0;
real alpha_b;
real<lower=0> sigmasq;
}
transformed parameters {
vector[n] mu;        // mean of observations
mu = mu_0 + alpha_b*type_b;
}
model {
// priors
mu_0 ~ normal(mu_sample, 10 * sqrt(v_sample));
alpha_b ~ normal(0.0, 100);
sigmasq ~ inv_gamma(0.01, 0.01);
// data distribution
for(i in 1:n){
y[i] ~ normal(mu[i], sqrt(sigmasq));
}
}
generated quantities {
real Rbsq;          // goodness-of-fit
vector[n] log_lik;  // log likelihood of data
Rbsq = 1 - sigmasq/v_sample;
for (i in 1:n) log_lik[i] = normal_lpdf(y[i]|mu[i], sqrt(sigmasq));
}
"
stan_dat = list(n = length(number), y = number,
type_b = type_b, v_sample = var(number), mu_sample = mean(number))
stan_fit = stan(model_code = stanmod, data = stan_dat, iter = 10^4)
#sso <- launch_shinystan(stan_fit)
# Mean, 0.025 quantile, and 0.975 quantile
summary(stan_fit)$summary[,c("mean", "2.5%", "97.5%")]
summary(stan_fit)$summary
# Gelman-Rubin statistic
summary(stan_fit)$summary[,"Rhat"]
# check convergence with trace plots
#stan_trace(stan_fit, c("mu_0", "alpha_b", "sigmasq"))
# Check the ACF of draws
stan_ac(stan_fit, c("mu_0", "alpha_b", "sigmasq"))
# WAIC and LOOC
log_lik = extract_log_lik(stan_fit, merge_chains = FALSE)
r_eff = exp(relative_eff(log_lik))
waic(log_lik)
loo(log_lik, r_eff = r_eff)
####  Model 2: A simple linear regression model using day as the predictor.
# Create model
stanmod = "
data {
int<lower=1> n; // number of observations
vector[n] y; // data
vector[n] day; //day
real<lower=0> v_sample; // sample variance of y
real mu_sample; // sample mean of y
}
parameters {
real beta_0;
real beta_1;
real<lower=0> sigmasq;
}
transformed parameters {
vector[n] mu;        // mean of observations
mu = beta_0 + beta_1*day;
}
model {
// priors
beta_0 ~ normal(0, 100);
beta_1 ~ normal(0 , 100);
sigmasq ~ inv_gamma(0.01, 0.01);
// data distribution
for(i in 1:n){
y[i] ~ normal(mu[i], sqrt(sigmasq));
}
}
generated quantities {
real Rbsq;          // goodness-of-fit
vector[n] log_lik;  // log likelihood of data
Rbsq = 1 - sigmasq/v_sample;
for (i in 1:n) log_lik[i] = normal_lpdf(y[i]|mu[i], sqrt(sigmasq));
}
"
stan_dat = list(n = length(number), y = number,
day = bacteria$day, v_sample = var(number), mu_sample = mean(number))
stan_fit = stan(model_code = stanmod, data = stan_dat, iter = 10^5)
sso <- launch_shinystan(stan_fit)
#### A separate lines (interaction) model using day as the quantitative predictor and using type = “A” as the reference category
type_b = c(type == 'B')
# Create model
stanmod = "
data {
int<lower=1> n; // number of observations
vector[n] y; // data
vector[n] day; //day
vector[n] type_b; //
real<lower=0> v_sample; // sample variance of y
real mu_sample; // sample mean of y
}
parameters {
real beta_0;
real beta_1;
real alpha_b;
real delta_b;
real<lower=0> sigmasq;
}
transformed parameters {
vector[n] mu;        // mean of observations
for(i in 1:n){
mu[i] = beta_0 + alpha_b*type_b[i] + beta_1*day[i] + delta_b*day[i]*type_b[i];
}
}
model {
// priors
beta_0 ~ normal(0.0, 100);
beta_1 ~ normal(0.0, 100);
delta_b ~ normal(0.0, 100);
alpha_b ~ normal(0.0, 100);
sigmasq ~ inv_gamma(0.01, 0.01);
// data distribution
for(i in 1:n){
y[i] ~ normal(mu[i], sqrt(sigmasq));
}
}
generated quantities {
real Rbsq;          // goodness-of-fit
vector[n] log_lik;  // log likelihood of data
Rbsq = 1 - sigmasq/v_sample;
for (i in 1:n) log_lik[i] = normal_lpdf(y[i]|mu[i], sqrt(sigmasq));
}
"
stan_dat = list(n = length(number), y = number, type_b = type_b,
day = bacteria$day, v_sample = var(number), mu_sample = mean(number))
stan_fit = stan(model_code = stanmod, data = stan_dat, iter = 10^5)
#sso <- launch_shinystan(stan_fit)
# Mean, 0.025 quantile, and 0.975 quantile
pl_cpi = summary(stan_fit)$summary[,c("mean", "2.5%", "97.5%")]
print(pl_cpi, digits = )
summary(stan_fit)$summary
# Gelman-Rubin statistic
summary(stan_fit)$summary[,"Rhat"]
# check convergence with trace plots
stan_trace(stan_fit, c("beta_0", "beta_1", "sigmasq"))
# Check the ACF of draws
stan_ac(stan_fit, c("beta_0", "beta_1", "sigmasq"))
# WAIC & LOOIC
log_lik = extract_log_lik(stan_fit, merge_chains = FALSE)
r_eff = exp(relative_eff(log_lik))
waic(log_lik)
loo(log_lik, r_eff = r_eff)
#sso <- launch_shinystan(stan_fit)
sso <- launch_shinystan(stan_fit)
Rbsq=extract(y_fit, pars="Rbsq")[[1]]
Rbsq=extract(stan_fit, pars="Rbsq")[[1]]
plot(density(Rbsq))
